import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import io from 'socket.io-client';
import { useAuth } from '../context/AuthProvider';
import { toast } from 'react-toastify'; // Import toast
import { useQueryClient } from '@tanstack/react-query'; // Import queryClient

const SocketContext = createContext(null);

export const useSocket = () => useContext(SocketContext);

export const SocketProvider = ({ children }) => {
    const [socket, setSocket] = useState(null);
    const { user } = useAuth(); // L·∫•y th√¥ng tin user t·ª´ AuthProvider
    const queryClient = useQueryClient(); // L·∫•y queryClient

    const connectSocket = useCallback(() => {
        // Ch·ªâ k·∫øt n·ªëi n·∫øu c√≥ user v√† ch∆∞a c√≥ socket
         if (user?.id && !socket) {
            console.log("ƒêang k·∫øt n·ªëi ƒë·∫øn socket cho user:", user.id);
            const newSocket = io('http://localhost:5000', { // ƒê·ªãa ch·ªâ backend
                withCredentials: true,
                 // query: { userId: user.id }
            });

            newSocket.on('connect', () => {
                console.log('ƒê√£ k·∫øt n·ªëi socket:', newSocket.id);
                 // ƒêƒÉng k√Ω userId v·ªõi server sau khi k·∫øt n·ªëi th√†nh c√¥ng
                 newSocket.emit('register_user', user.id);
            });

            newSocket.on('user_registered', (data) => {
                 console.log('User ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra:', data);
             });

            // L·∫Øng nghe s·ª± ki·ªán task m·ªõi ho·∫∑c ƒë∆∞·ª£c g√°n l·∫°i
            newSocket.on('new_task', (taskData) => {
                console.log('C√≥ c√¥ng vi·ªác m·ªõi:', taskData);
                toast.info(`üîî C√≥ c√¥ng vi·ªác m·ªõi/c·∫≠p nh·∫≠t: ${taskData.moTa} ·ªü ph√≤ng ${taskData.phong_name}`);
                // Invalidate c√°c query li√™n quan ƒë·ªÉ c·∫≠p nh·∫≠t UI
                queryClient.invalidateQueries({ queryKey: ['assignedBaoHong'] });
                queryClient.invalidateQueries({ queryKey: ['baotriMyTasks'] });
                // C√≥ th·ªÉ th√™m invalidate cho query l·∫•y th√¥ng b√°o n·∫øu c√≥
            });

             // L·∫Øng nghe s·ª± ki·ªán task b·ªã h·ªßy
             newSocket.on('task_cancelled', (data) => {
                console.log('H·ªßy c√¥ng vi·ªác:', data);
                toast.warn(`‚ö†Ô∏è C√¥ng vi·ªác ID ${data.baoHongId} ƒë√£ b·ªã qu·∫£n tr·ªã vi√™n h·ªßy/thu h·ªìi.`);
                queryClient.invalidateQueries({ queryKey: ['assignedBaoHong'] }); // Trang LichNhanVien
                queryClient.invalidateQueries({ queryKey: ['baotriMyTasks'] });   // Trang BaoTri
                // C√≥ th·ªÉ c·∫ßn invalidate th√™m n·∫øu task b·ªã h·ªßy c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn c√°c query kh√°c
            });

            newSocket.on('disconnect', () => {
                console.log('Ng·∫Øt k·∫øt n·ªëi socket');
                // C√≥ th·ªÉ th·ª≠ k·∫øt n·ªëi l·∫°i ·ªü ƒë√¢y n·∫øu mu·ªën
                setSocket(null); // Reset socket state
            });

            newSocket.on('connect_error', (err) => {
                console.error('L·ªói k·∫øt n·ªëi socket:', err.message);
                 // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
                 setSocket(null);
            });

            setSocket(newSocket);
         } else if (!user?.id && socket) {
             // N·∫øu user ƒëƒÉng xu·∫•t, ng·∫Øt k·∫øt n·ªëi socket
              console.log("Ng·∫Øt k·∫øt n·ªëi ƒë·∫øn socket v√¨ user logout.");
              socket.disconnect();
              setSocket(null);
         }
    }, [user, socket, queryClient]); // Th√™m queryClient v√†o dependency

    useEffect(() => {
         connectSocket(); // K·∫øt n·ªëi khi user thay ƒë·ªïi

         // Cleanup khi component unmount ho·∫∑c user thay ƒë·ªïi
        return () => {
            if (socket) {
                console.log("Ng·∫Øt k·∫øt n·ªëi v√† cleanup.");
                socket.disconnect();
                setSocket(null);
            }
        };
    }, [connectSocket, socket]); // Ch·ªâ ph·ª• thu·ªôc v√†o connectSocket v√† socket


    return (
        <SocketContext.Provider value={socket}>
            {children}
        </SocketContext.Provider>
    );
};