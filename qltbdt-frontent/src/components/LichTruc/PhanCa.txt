// import React, { useState, useEffect } from "react";
// import { Calendar, dateFnsLocalizer } from "react-big-calendar";
// import {
//     format, parse, startOfWeek, getDay, addMonths, setHours, setMinutes,
//     isAfter, addDays, isWithinInterval, isBefore, startOfDay,
// } from "date-fns";
// import { vi } from "date-fns/locale";
// import { toZonedTime, fromZonedTime } from "date-fns-tz";
// import "react-big-calendar/lib/css/react-big-calendar.css";
// import { FiChevronLeft, FiChevronRight, FiTrash2 } from "react-icons/fi";
// import withDragAndDrop from "react-big-calendar/lib/addons/dragAndDrop";
// import "react-big-calendar/lib/addons/dragAndDrop/styles.css";

// const locales = { vi };
// const timeZone = "Asia/Ho_Chi_Minh"; // UTC+7

// const localizer = dateFnsLocalizer({
//     format: (date, formatStr, options) => format(toZonedTime(date, timeZone), formatStr, { ...options, locale: locales["vi"] }),
//     parse: (str, formatStr) => fromZonedTime(parse(str, formatStr, new Date()), timeZone),
//     startOfWeek: () => startOfWeek(new Date(), { locale: locales["vi"] }),
//     getDay: (date) => getDay(toZonedTime(date, timeZone)),
//     locales
// });

// const DnDCalendar = withDragAndDrop(Calendar);

// const PhanCa = () => {
//     const [currentDate, setCurrentDate] = useState(new Date());
//     const [events, setEvents] = useState([]);
//     const [showModal, setShowModal] = useState(false);
//     const [selectedSlot, setSelectedSlot] = useState(null);
//     const [shiftForm, setShiftForm] = useState({
//         employeeName: "",
//         nhanvien_id: null,
//         shiftType: "morning", // Mặc định là ca sáng
//         startTime: "",
//         endTime: "",
//         notes: ""
//     });
//     const [error, setError] = useState("");
//     const [currentDay, setCurrentDay] = useState(new Date());
//     const [employees, setEmployees] = useState([]);

//     // useEffect fetch employees (không đổi)
//     useEffect(() => {
//         fetch("http://localhost:5000/api/lichtruc/nhanvien")
//             .then((response) => response.json())
//             .then((data) => {
//                 setEmployees(data);
//             })
//             .catch((error) => console.error("Lỗi khi gọi API nhân viên:", error));
//     }, []);

//     // --- Định nghĩa loại ca (Đã loại bỏ 'fullDay') ---
//     const shiftTypes = {
//         morning: { title: "Ca Sáng", color: "#BFDBFE", startHour: 8, endHour: 15 },
//         evening: { title: "Ca Chiều", color: "#FED7AA", startHour: 15, endHour: 22 }
//         // Không còn 'fullDay' ở đây
//     };
//     // const moveEvent = ({ event, start, end }) => {
//     //     console.log("Ngày bắt đầu:", format(start, "dd/MM/yyyy"));
//     //     console.log("Ngày kết thúc:", format(end, "dd/MM/yyyy"));

//     //     // Kiểm tra nếu ngày bắt đầu nhỏ hơn ngày hiện tại
//     //     if (isBefore(startOfDay(start), startOfDay(new Date()))) {
//     //         setError("Không thể di chuyển sự kiện đến ngày đã qua.");
//     //         return;
//     //     }

//     //     // Loại bỏ sự kiện trùng lặp (giữ lại cái cũ)
//     //     const updatedEvents = events.filter(existingEvent =>
//     //         !(existingEvent.employeeName === event.employeeName &&
//     //             isSameDay(existingEvent.start, start) &&
//     //             existingEvent.shiftType === event.shiftType) // Giữ lại sự kiện cũ, loại bỏ cái mới
//     //     );

//     //     const newEvent = {
//     //         ...event,
//     //         start,
//     //         end
//     //     };

//     //     // Kiểm tra trùng lặp
//     //     if (updatedEvents.some(existingEvent =>
//     //         existingEvent.employeeName === newEvent.employeeName &&
//     //         isSameDay(existingEvent.start, start) &&
//     //         existingEvent.shiftType === newEvent.shiftType)) {
//     //         setError("Nhân viên đã có ca làm việc trùng trong cùng ngày.");
//     //         return;
//     //     }

//     //     // Cập nhật danh sách sự kiện
//     //     setEvents([...updatedEvents, newEvent]);
//     //     setError("");
//     // };

//     // --- HÀM RESIZE EVENT VỚI VALIDATION ---
//     const resizeEvent = ({ event, start, end }) => {
//         console.log("Resize Event - Start:", start, "End:", end);
//         setError("");

//         // 1. Validation: Không cho phép thay đổi vào ngày trong quá khứ
//         const today = startOfDay(new Date());
//         if (isBefore(startOfDay(start), today)) {
//             setError("Không thể thay đổi lịch vào ngày đã qua.");
//             console.error("Validation Failed: Cannot resize event into the past.");
//             return;
//         }

//         // 2. Validation: Kiểm tra trùng lặp thời gian (Overlap) với các sự kiện khác của CÙNG MỘT nhân viên
//         const conflictingEvent = events.find(existingEvent =>
//             existingEvent !== event && // Loại trừ chính sự kiện đang resize
//             existingEvent.nhanvien_id === event.nhanvien_id && // Chỉ kiểm tra với cùng nhân viên (Quan trọng!)
//             isBefore(start, existingEvent.end) && isAfter(end, existingEvent.start) // Kiểm tra overlap thời gian
//         );

//         if (conflictingEvent) {
//             setError(`Trùng lịch với ca (${format(conflictingEvent.start, 'HH:mm')} - ${format(conflictingEvent.end, 'HH:mm')}) của nhân viên ${event.employeeName} vào ngày ${format(conflictingEvent.start, 'dd/MM')}.`);
//             console.error("Validation Failed: Resized event overlaps with existing event:", conflictingEvent);
//             return;
//         }

//         // 3. Validation logic ca (Sáng/Chiều vs Cả Ngày) - ĐÃ BỊ LOẠI BỎ
//         // Không cần kiểm tra này nữa vì không còn 'fullDay'

//         // --- Nếu tất cả validation thành công ---
//         console.log("Resize Validation Passed. Updating event.");
//         setEvents(prevEvents =>
//             prevEvents.map(ev =>
//                 ev.id === event.id // Nên dùng ID để xác định chính xác sự kiện
//                     ? { ...ev, start, end }
//                     : ev
//             )
//         );
//     };


//     // --- HÀM HANDLE SLOT SELECT VỚI VALIDATION ---
//     // --- HÀM HANDLE SLOT SELECT (Đã loại bỏ kiểm tra logic fullDay sơ bộ) ---
//     const handleSlotSelect = (slotInfo) => {
//         console.log("Slot Selected:", slotInfo);
//         setError("");

//         // 1. Validation cơ bản: Kiểm tra slotInfo hợp lệ
//         if (!slotInfo || !slotInfo.start || !slotInfo.end) {
//             alert("Lựa chọn không hợp lệ. Vui lòng thử lại.");
//             console.error("Validation Failed: Invalid slotInfo object.");
//             return;
//         }

//         // 2. Validation: Không cho phép chọn ngày trong quá khứ
//         const today = startOfDay(new Date());
//         if (isBefore(startOfDay(slotInfo.start), today)) {
//             alert("Không thể thêm lịch vào ngày đã qua. Vui lòng chọn ngày hiện tại hoặc tương lai.");
//             console.error("Validation Failed: Cannot select past date.");
//             return;
//         }

//         // 3. Validation sơ bộ: Kiểm tra trùng lặp thời gian (Overlap) dựa trên nhân viên *hiện tại* trong form
//         const currentSelectedEmployeeId = shiftForm.nhanvien_id;
//         if (currentSelectedEmployeeId) {
//             const potentialOverlap = events.find(existingEvent =>
//                 existingEvent.nhanvien_id === currentSelectedEmployeeId &&
//                 isBefore(slotInfo.start, existingEvent.end) && isAfter(slotInfo.end, existingEvent.start)
//             );

//             if (potentialOverlap) {
//                 // Quan trọng: Kiểm tra này có thể không chính xác hoàn toàn vì slotInfo.start/end
//                 // chưa chắc đã là giờ bắt đầu/kết thúc ca thực tế (8h, 15h, 22h).
//                 // Kiểm tra overlap chính xác nhất nên nằm ở handleFormSubmit.
//                 // Tuy nhiên, vẫn có thể cảnh báo sớm nếu khoảng thời gian chọn ban đầu đã bị trùng.
//                 alert(`Cảnh báo: Nhân viên "${shiftForm.employeeName}" dường như đã có lịch trong khoảng thời gian bạn chọn (${format(potentialOverlap.start, 'dd/MM HH:mm')}). Kiểm tra kỹ trước khi lưu.`);
//                 console.warn("Potential Overlap Warning (Slot Select):", potentialOverlap);
//                 // Không return, vẫn cho mở modal
//             }

//             // 4. Validation sơ bộ logic ca (Sáng/Chiều vs Cả Ngày) - ĐÃ BỊ LOẠI BỎ
//         }

//         // --- Nếu các validation cơ bản/sơ bộ thành công ---
//         console.log("Slot Selection Passed initial checks. Opening modal.");
//         setSelectedSlot(slotInfo);
//         // Giữ lại nhân viên đã chọn, reset các trường khác hoặc đặt giá trị mặc định
//         setShiftForm(prevForm => ({
//             employeeName: prevForm.employeeName, // Giữ lại tên nhân viên
//             nhanvien_id: prevForm.nhanvien_id, // Giữ lại ID nhân viên
//             shiftType: "morning", // Reset về mặc định là ca sáng khi chọn slot mới
//             startTime: slotInfo.start,
//             endTime: slotInfo.end,
//             notes: ""
//         }));
//         setShowModal(true);
//     };


//     // --- HÀM FORM SUBMIT (Đã loại bỏ kiểm tra logic fullDay) ---
//     const handleFormSubmit = (e) => {
//         e.preventDefault();
//         setError("");

//         // 1. Validation: Đảm bảo đã chọn slot và nhân viên
//         if (!selectedSlot) {
//             setError("Lỗi: Không có khoảng thời gian nào được chọn.");
//             console.error("Validation Failed: No slot selected.");
//             return;
//         }
//         if (!shiftForm.nhanvien_id || !shiftForm.employeeName) {
//             setError("Vui lòng chọn nhân viên.");
//             console.error("Validation Failed: No employee selected.");
//             return;
//         }

//         // 2. Tính toán thời gian bắt đầu và kết thúc thực tế dựa trên loại ca (Sáng hoặc Chiều)
//         let start = new Date(selectedSlot.start); // Lấy ngày từ slot
//         let end;
//         const shiftDetails = shiftTypes[shiftForm.shiftType];

//         if (!shiftDetails) { // Kiểm tra shiftType hợp lệ
//             setError("Lỗi: Loại ca không hợp lệ.");
//             console.error("Validation Failed: Invalid shiftType selected.");
//             return;
//         }

//         // Đặt giờ/phút theo loại ca Sáng hoặc Chiều
//         start = setHours(setMinutes(start, 0), shiftDetails.startHour);
//         end = setHours(setMinutes(new Date(start), 0), shiftDetails.endHour);

//         console.log(`Calculated Shift Times for ${shiftForm.shiftType} - Start:`, start, "End:", end);

//         // 3. Validation: Kiểm tra trùng lặp thời gian (Overlap) với các sự kiện khác của CÙNG MỘT nhân viên (Quan trọng!)
//         const conflictingEvent = events.find(existingEvent =>
//             existingEvent.nhanvien_id === shiftForm.nhanvien_id && // Chỉ xét cùng nhân viên
//             isBefore(start, existingEvent.end) && isAfter(end, existingEvent.start) // Kiểm tra overlap chính xác
//         );

//         if (conflictingEvent) {
//             setError(`Trùng lịch: Nhân viên "${shiftForm.employeeName}" đã có ca (${format(conflictingEvent.start, 'HH:mm')} - ${format(conflictingEvent.end, 'HH:mm')}) vào ngày ${format(conflictingEvent.start, 'dd/MM')}. Không thể thêm ca ${shiftDetails.title}.`);
//             console.error("Validation Failed (Submit): Event overlaps with existing event:", conflictingEvent);
//             return;
//         }

//         // 4. Validation logic ca (Sáng/Chiều vs Cả Ngày) - ĐÃ BỊ LOẠI BỎ

//         // --- Nếu tất cả validation thành công ---
//         console.log("Form Submit Validation Passed. Creating new event.");
//         const newEvent = {
//             id: Date.now() + Math.random(), // ID tạm thời
//             title: `${shiftForm.employeeName} - ${shiftDetails.title}`,
//             start,
//             end,
//             shiftType: shiftForm.shiftType,
//             employeeName: shiftForm.employeeName,
//             nhanvien_id: shiftForm.nhanvien_id,
//             // Lưu ý: màu sắc sẽ được lấy từ shiftTypes trong eventStyleGetter
//         };

//         setEvents(prevEvents => [...prevEvents, newEvent]);
//         setShowModal(false);
//         // Có thể reset form hoàn toàn ở đây nếu muốn
//         // setShiftForm({ employeeName: "", nhanvien_id: null, shiftType: "morning", startTime: "", endTime: "", notes: "" });
//     };

//     const navigateCalendar = (direction) => {
//         const newDate = addMonths(currentDate, direction === "next" ? 1 : -1);
//         setCurrentDate(newDate);
//     };

//     const handleEventDelete = (event) => {
//         const updatedEvents = events.filter(e => e !== event);
//         setEvents(updatedEvents);
//     };

//     const eventStyleGetter = (event) => {
//         const shiftDetail = shiftTypes[event.shiftType];
//         const backgroundColor = shiftDetail ? shiftDetail.color : "#3B82F6"; // Màu mặc định nếu loại ca lạ

//         const style = {
//             backgroundColor: backgroundColor,
//             color: "#1F2937", // Màu chữ
//             border: "none",
//             borderRadius: "4px",
//             fontSize: "12px",
//             overflow: "hidden",
//             textOverflow: "ellipsis",
//             whiteSpace: "nowrap"
//         };
//         return { style };
//     };

//     const EventComponent = ({ event }) => (
//         <div className="flex items-center justify-between w-full p-1">
//             <span className="flex-1 truncate">{event.title}</span>
//             <span className="ml-2 text-xs text-gray-500">
//                 {format(event.start, "HH:mm")} - {format(event.end, "HH:mm")}
//             </span>
//             <button
//                 onClick={(e) => {
//                     e.stopPropagation();
//                     handleEventDelete(event);
//                 }}
//                 className="ml-1 text-destructive hover:text-destructive/80"
//             >
//                 <FiTrash2 className="w-3 h-3" />
//             </button>
//         </div>
//     );

//     const getEventsByDate = (currentDay) => {
//         return events.filter(event =>
//             // Kiểm tra nếu ngày hiện tại nằm trong khoảng thời gian từ start đến end
//             isWithinInterval(currentDay, {
//                 start: startOfDay(event.start),
//                 end: startOfDay(event.end)
//             }) ||
//             // Kiểm tra nếu currentDay khớp ngày bắt đầu hoặc ngày kết thúc
//             format(event.start, "yyyy-MM-dd") === format(currentDay, "yyyy-MM-dd") ||
//             format(event.end, "yyyy-MM-dd") === format(currentDay, "yyyy-MM-dd")
//         );
//     };

//     // lưu lịch trực vào db
//     const handleSaveShifts = () => {
//         console.log("Shift Form Data:", shiftForm);
//         if (!shiftForm.nhanvien_id || !shiftForm.startTime || !shiftForm.endTime) {
//             alert("Vui lòng chọn nhân viên và điền đủ thông tin.");
//             return;
//         }

//         const formattedStart = format(selectedSlot.start, "yyyy-MM-dd HH:mm:ss");
//         const formattedEnd = format(selectedSlot.end, "yyyy-MM-dd HH:mm:ss");

//         const newShift = {
//             nhanvien_id: shiftForm.nhanvien_id,
//             caLamViec: shiftForm.shiftType === "morning" ? "Ca Sáng"
//                 : shiftForm.shiftType === "evening" ? "Ca Chiều"
//                     : "Cả Ngày",
//             start_time: formattedStart,
//             end_time: formattedEnd,
//             trangThai: "Đang Chờ",
//             isSupporting: false,
//             notes: shiftForm.notes
//         };

//         fetch("http://localhost:5000/api/lichtruc/themlichtruc", {
//             method: "POST",
//             headers: { "Content-Type": "application/json" },
//             body: JSON.stringify(newShift)
//         })
//             .then((response) => {
//                 if (!response.ok) {
//                     throw new Error("Lỗi khi lưu lịch trực");
//                 }
//                 alert("Lịch trực đã được thêm thành công!");
//             })
//             .catch((error) => {
//                 console.error("Lỗi khi lưu lịch trực:", error);
//                 alert("Đã xảy ra lỗi khi lưu lịch trực.");
//             });
//     };



//     return (
//         <div className="h-screen bg-slate-50">
//             <div className="max-w-full mx-auto">
//                 <div className="flex flex-col h-screen gap-2 p-2 overflow-y-auto lg:flex-row">
//                     <div className="p-4 rounded-md shadow-md lg:w-3/4 bg-card">
//                         {/* Header Calendar */}
//                         <div className="flex items-center justify-between mb-6 border">
//                             <h1 className="text-lg font-bold text-foreground">Lịch Làm Việc</h1>
//                             <div className="flex items-center gap-4">
//                                 <button onClick={() => navigateCalendar("prev")} className="p-2 transition-colors rounded-full hover:bg-secondary">
//                                     <FiChevronLeft className="w-5 h-5" />
//                                 </button>
//                                 <span className="text-foreground font-body">
//                                     {format(currentDate, "MMMM yyyy", { locale: locales["vi"] })}
//                                 </span>
//                                 <button onClick={() => navigateCalendar("next")} className="p-2 transition-colors rounded-full hover:bg-secondary">
//                                     <FiChevronRight className="w-5 h-5" />
//                                 </button>
//                             </div>
//                         </div>

//                         {/* DnDCalendar Component */}
//                         <DnDCalendar
//                             localizer={localizer}
//                             events={events}
//                             startAccessor="start"
//                             endAccessor="end"
//                             style={{ height: 700 }}
//                             onSelectSlot={handleSlotSelect}
//                             selectable
//                             eventPropGetter={eventStyleGetter} // Đã cập nhật
//                             date={currentDate}
//                             onNavigate={(date) => setCurrentDate(date)}
//                             views={["month"]} // Chỉ hiển thị view tháng
//                             // onEventDrop={moveEvent} // Tạm thời tắt moveEvent nếu chưa hoàn thiện validation
//                             onEventResize={resizeEvent} // Đã cập nhật
//                             resizable
//                             draggableAccessor={() => true} // Cho phép kéo thả
//                             components={{ event: EventComponent }}
//                             popup // Hiển thị popup khi có nhiều event trong 1 ngày
//                             popupOffset={5}
//                         // max={5} // Giới hạn số event hiển thị trực tiếp trên ô ngày (nếu cần)
//                         />

//                         {/* Nút Lưu Lịch Trực */}
//                         <div className="flex justify-end gap-4 mt-4">
//                             <button
//                                 onClick={handleSaveShifts}
//                                 className="px-4 py-2 text-white bg-blue-500 rounded hover:bg-blue-600"
//                             >
//                                 Lưu Lịch Trực
//                             </button>
//                         </div>
//                     </div>
//                     <div className="space-y-2 lg:w-1/4">
//                         <div className="p-6 rounded-md shadow-md h-[180px] bg-card">
//                             <h2 className="mb-4 text-lg font-heading text-foreground">Chú Giải Các Ca</h2>
//                             <div className="space-y-3">
//                                 {Object.entries(shiftTypes).map(([key, value]) => (
//                                     <div key={key} className="flex items-center gap-3">
//                                         <div className="w-4 h-4 rounded" style={{ backgroundColor: value.color }}></div>
//                                         <span className="text-body text-foreground">
//                                             {value.title}:  {key === "morning" ? "8:00 - 15:00" : key === "evening" ? "15:00 - 22:00" : "8:00 - 22:00"}
//                                         </span>
//                                     </div>
//                                 ))}
//                             </div>
//                         </div>
//                         <div className="p-6 rounded-md shadow-md h-[370px] bg-card">
//                             <h2 className="mb-4 text-lg font-heading text-foreground">Thống Kê Nhanh</h2>
//                             <div className="space-y-3">
//                                 <div className="flex items-center justify-between">
//                                     <span className="text-body text-accent">Tổng Số Ca</span>
//                                     <span className="text-body font-heading text-foreground">{events.length}</span>
//                                 </div>
//                                 {events.map((event, index) => (
//                                     <div key={index} className="flex items-center justify-between">
//                                         <span className="text-body text-accent">{event.employeeName}</span>
//                                         <span className="text-body text-foreground">
//                                             {format(event.start, "HH:mm")} - {format(event.end, "HH:mm")}
//                                         </span>
//                                     </div>
//                                 ))}
//                             </div>
//                         </div>
//                         <div className="p-6 rounded-md shadow-md h-[370px] bg-card">
//                             <h2 className="mb-4 text-lg font-heading text-foreground">Thông Tin Nhân Sự Theo Ngày</h2>
//                             <div className="flex items-center justify-between mb-4">
//                                 <button
//                                     onClick={() => setCurrentDay(addDays(currentDay, -1))}
//                                     className="p-2 transition-colors rounded-full hover:bg-secondary"
//                                 >
//                                     <FiChevronLeft className="w-5 h-5" />
//                                 </button>
//                                 <span className="text-foreground font-body">
//                                     {format(currentDay, "dd/MM/yyyy", { locale: locales["vi"] })}
//                                 </span>
//                                 <button
//                                     onClick={() => setCurrentDay(addDays(currentDay, 1))}
//                                     className="p-2 transition-colors rounded-full hover:bg-secondary"
//                                 >
//                                     <FiChevronRight className="w-5 h-5" />
//                                 </button>
//                             </div>
//                             <div className="space-y-3">
//                                 {getEventsByDate(currentDay).map((event, index) => (
//                                     <div key={index} className="flex items-center justify-between">
//                                         <span className="text-body text-accent">{event.employeeName}</span>
//                                         <span className="text-body text-foreground">
//                                             {format(event.start, "HH:mm")} - {format(event.end, "HH:mm")}
//                                         </span>
//                                     </div>
//                                 ))}
//                             </div>
//                         </div>
//                     </div>
//                 </div>
//             </div>

//             {/* Modal Thêm Ca Mới (Select loại ca đã loại bỏ Cả Ngày) */}
//             {showModal && (
//                 <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50">
//                     <div className="w-full max-w-md p-6 rounded-lg shadow-lg bg-card">
//                         <h2 className="mb-4 text-lg font-heading text-foreground">Thêm Ca Mới</h2>
//                         {error && <div className="p-3 mb-4 text-sm text-red-700 bg-red-100 border border-red-300 rounded">{error}</div>}
//                         <form onSubmit={handleFormSubmit} className="space-y-4">
//                             {/* Input chọn Nhân Viên (Không đổi) */}
//                             <div>
//                                 <label className="block mb-2 text-body text-foreground">Nhân Viên</label>
//                                 <select
//                                     className="w-full p-2 border rounded-sm border-input focus:ring-2 focus:ring-ring"
//                                     value={shiftForm.employeeName}
//                                     onChange={(e) => {
//                                         const selectedEmployee = employees.find(emp => emp.hoTen === e.target.value);
//                                         setShiftForm(prev => ({ // Cập nhật state an toàn hơn
//                                             ...prev,
//                                             employeeName: selectedEmployee ? selectedEmployee.hoTen : "",
//                                             nhanvien_id: selectedEmployee ? selectedEmployee.id : null,
//                                         }));
//                                         setError("");
//                                     }}
//                                     required
//                                 >
//                                     <option value="">Chọn Nhân Viên</option>
//                                     {employees.map((emp) => (
//                                         <option key={emp.id} value={emp.hoTen}>
//                                             {emp.hoTen}
//                                         </option>
//                                     ))}
//                                 </select>
//                             </div>
//                             {/* Input chọn Loại Ca (Chỉ còn Sáng/Chiều) */}
//                             <div>
//                                 <label className="block mb-2 text-body text-foreground">Loại Ca</label>
//                                 <select
//                                     className="w-full p-2 border rounded-sm border-input focus:ring-2 focus:ring-ring"
//                                     value={shiftForm.shiftType}
//                                     onChange={(e) => {
//                                         setShiftForm(prev => ({ ...prev, shiftType: e.target.value }));
//                                         setError("");
//                                     }}
//                                     required
//                                 >
//                                     {/* Chỉ map qua các key trong shiftTypes (đã bỏ fullDay) */}
//                                     {Object.entries(shiftTypes).map(([key, value]) => (
//                                         <option key={key} value={key}>{value.title}</option>
//                                     ))}
//                                 </select>
//                             </div>
//                             {/* Input Ghi chú (nếu cần) */}
//                             {/* ... */}
//                             {/* Nút Lưu/Hủy (Không đổi) */}
//                             <div className="flex gap-4">
//                                 <button type="submit" className="flex-1 py-2 transition-colors rounded-sm bg-primary text-primary-foreground hover:bg-primary/90">
//                                     Lưu Ca
//                                 </button>
//                                 <button type="button" onClick={() => { setShowModal(false); setError(""); }} className="flex-1 py-2 transition-colors rounded-sm bg-secondary text-secondary-foreground hover:bg-secondary/90">
//                                     Hủy
//                                 </button>
//                             </div>
//                         </form>
//                     </div>
//                 </div>
//             )}
//         </div>
//     );
// };

// export default PhanCa;
