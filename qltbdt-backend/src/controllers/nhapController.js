
const db = require("../config/db"); 
// L·∫•y danh s√°ch t·∫•t c·∫£ phi·∫øu nh·∫≠p
exports.getAllPhieuNhap = async (req, res) => {
    try {
        const [rows] = await db.query("SELECT * FROM phieunhap");
        res.json(rows);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// L·∫•y chi ti·∫øt phi·∫øu nh·∫≠p theo ID
exports.getPhieuNhapById = async (req, res) => {
    const { id } = req.params;
    try {
        const [rows] = await db.query("SELECT * FROM phieunhap WHERE id = ?", [id]);
        res.json(rows[0]);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// L·∫•y ID phi·∫øu nh·∫≠p ti·∫øp theo
exports.getNextPhieuNhapId = async (req, res) => {
    const query = "SELECT MAX(id) AS maxId FROM phieunhap";

    db.query(query, (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói SQL l·∫•y ID ti·∫øp theo:", err);
            return res.status(500).json({ error: "L·ªói server" });
        }

        console.log("üìå K·∫øt qu·∫£ MAX(id):", result); // üõ† Debug log

        if (!result || result.length === 0 || result[0].maxId === null) {
            console.log("üìå Kh√¥ng c√≥ phi·∫øu nh·∫≠p n√†o, nextId = 1");
            return res.json({ nextPhieuNhapId: 1 });
        } else {
            console.log("üìå Next ID:", result[0].maxId + 1);
            return res.json({ nextPhieuNhapId: result[0].maxId + 1 });
        }
    });
};



// L·∫•y h·ªç t√™n ng∆∞·ªùi t·∫°o theo user_id
exports.getHoTenByUserId = async (req, res) => {
    const { userId } = req.params;
    try {
        const [rows] = await db.query("SELECT hoTen FROM users WHERE id = ?", [userId]);
        if (rows.length === 0) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        res.json({ hoTen: rows[0].hoTen });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// T·∫°o phi·∫øu nh·∫≠p v·ªõi tr∆∞·ªùng h·ª£p nh·∫≠p (muaMoi ho·∫∑c taiTro)
exports.createPhieuNhap = async (req, res) => {
    const { userId, truongHopNhap, ngayTao, danhSachThietBi } = req.body;

    if (!["muaMoi", "taiTro"].includes(truongHopNhap)) {
        return res.status(400).json({ error: "Tr∆∞·ªùng h·ª£p nh·∫≠p kh√¥ng h·ª£p l·ªá!" });
    }

    const connection = await db.getConnection(); // M·ªü k·∫øt n·ªëi DB
    try {
        await connection.beginTransaction(); // B·∫Øt ƒë·∫ßu transaction

        // L·∫•y h·ªç t√™n ng∆∞·ªùi t·∫°o t·ª´ userId
        const [userRows] = await connection.query("SELECT hoTen FROM users WHERE id = ?", [userId]);
        if (userRows.length === 0) {
            throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
        }
        const nguoiTao = userRows[0].hoTen;

        // Ch√®n v√†o b·∫£ng `phieunhap`
        const [phieuNhapResult] = await connection.query(
            "INSERT INTO phieunhap (user_id, nguoiTao, truongHopNhap, ngayTao) VALUES (?, ?, ?, ?)",
            [userId, nguoiTao, truongHopNhap, ngayTao]
        );
        const phieuNhapId = phieuNhapResult.insertId; // ID phi·∫øu nh·∫≠p v·ª´a t·∫°o

        // Ch√®n danh s√°ch thi·∫øt b·ªã v√†o b·∫£ng `thongtinthietbi`
        if (danhSachThietBi && danhSachThietBi.length > 0) {
            const insertQuery = `
                INSERT INTO thongtinthietbi (thietbi_id, phieunhap_id, tenThietBi, tinhTrang) 
                VALUES ?
            `;

            const values = danhSachThietBi.map(item => [item.thietbi_id, phieuNhapId, item.tenThietBi, item.tinhTrang]);
            await connection.query(insertQuery, [values]);
        }

        await connection.commit(); // X√°c nh·∫≠n transaction
        res.json({ message: "T·∫°o phi·∫øu nh·∫≠p th√†nh c√¥ng!", phieunhapId: phieuNhapId });
    } catch (error) {
        await connection.rollback(); // Ho√†n t√°c n·∫øu c√≥ l·ªói
        res.status(500).json({ error: error.message });
    } finally {
        connection.release(); // ƒê√≥ng k·∫øt n·ªëi
    }
};

// L·∫•y c√°c thi·∫øt b·ªã trong phi·∫øu nh·∫≠p
exports.getThietBiInPhieuNhap = async (req, res) => {
    const { phieuNhapId } = req.params;
    
    try {
        const [rows] = await db.execute(
            `SELECT 
                ttb.*, 
                pn.truongHopNhap 
            FROM thongtinthietbi ttb
            JOIN phieunhap pn ON ttb.phieunhap_id = pn.id
            WHERE ttb.phieunhap_id = ?`, 
            [phieuNhapId]
        );
        res.json(rows);
    } catch (error) {
        console.error("L·ªói l·∫•y danh s√°ch thi·∫øt b·ªã:", error);
        res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch thi·∫øt b·ªã" });
    }
};

// X√≥a phi·∫øu nh·∫≠p theo ID
exports.deletePhieuNhap = async (req, res) => {
    const { id } = req.params;

    const connection = await db.getConnection();
    try {
        await connection.beginTransaction();

        // X√≥a c√°c thi·∫øt b·ªã li√™n quan trong b·∫£ng `thongtinthietbi`
        await connection.query("DELETE FROM thongtinthietbi WHERE phieunhap_id = ?", [id]);

        // X√≥a phi·∫øu nh·∫≠p
        const [result] = await connection.query("DELETE FROM phieunhap WHERE id = ?", [id]);

        if (result.affectedRows === 0) {
            throw new Error("Kh√¥ng t√¨m th·∫•y phi·∫øu nh·∫≠p ƒë·ªÉ x√≥a!");
        }

        await connection.commit();
        res.json({ message: "X√≥a phi·∫øu nh·∫≠p th√†nh c√¥ng!" });
    } catch (error) {
        await connection.rollback();
        res.status(500).json({ error: error.message });
    } finally {
        connection.release();
    }
};
